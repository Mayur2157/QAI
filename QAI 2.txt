from qiskit import QuantumCircuit, transpile
from qiskit.tools.jupyter import *
from qiskit.visualization import *
from ibm_quantum_widgets import *
from qiskit_ibm_runtime import QiskitRuntimeService, Sampler, Estimator, Session, Options
service = QiskitRuntimeService(channel="ibm_quantum")



!pip install qiskit-ignis



from qiskit import QuantumCircuit, assemble, Aer, transpile
from qiskit.visualization import plot_histogram
from qiskit.ignis.mitigation.measurement import CompleteMeasFitter, complete_meas_cal

# Define the quantum circuit
qc = QuantumCircuit(3, 3)
qc.h(0)
qc.cx(0, 1)
qc.cx(0, 2)
qc.measure([0, 2, 2], [0, 2, 2])

# Simulate the noisy circuit and perform error mitigation
backend = Aer.get_backend('qasm_simulator')
qobj = assemble(transpile(qc, backend), shots=1000)
counts = backend.run(qobj).result().get_counts()

# Error mitigation
cal_circuits, state_labels = complete_meas_cal(qubit_list=[0, 1, 2])
cal_results = backend.run(assemble(cal_circuits, backend=backend)).result()
meas_fitter = CompleteMeasFitter(cal_results, state_labels)
mitigated_counts = meas_fitter.filter.apply(counts)

# Print and plot the results
print("Original counts:", counts)
print("Mitigated counts:", mitigated_counts)
plot_histogram([counts, mitigated_counts], legend=['Original', 'Mitigated'])

